/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.sdyc.jise.server.protocol;  
@SuppressWarnings("all")
/** 传输的抓取结果 Task 消息, 序列化结果 */
@org.apache.avro.specific.AvroGenerated
public class FetchResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4392838956093329738L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FetchResponse\",\"namespace\":\"com.sdyc.jise.server.protocol\",\"doc\":\"传输的抓取结果 Task 消息, 序列化结果\",\"fields\":[{\"name\":\"taskId\",\"type\":\"string\",\"doc\":\"Task ID\"},{\"name\":\"exrror\",\"type\":[\"string\",\"null\"],\"doc\":\"Server Message\"},{\"name\":\"statusCode\",\"type\":\"int\",\"doc\":\"是否抓取成功, 状态码\"},{\"name\":\"fetchCount\",\"type\":\"int\",\"doc\":\"抓取数量\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Task ID */
  @Deprecated public java.lang.CharSequence taskId;
  /** Server Message */
  @Deprecated public java.lang.CharSequence exrror;
  /** 是否抓取成功, 状态码 */
  @Deprecated public int statusCode;
  /** 抓取数量 */
  @Deprecated public int fetchCount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public FetchResponse() {}

  /**
   * All-args constructor.
   * @param taskId Task ID
   * @param exrror Server Message
   * @param statusCode 是否抓取成功, 状态码
   * @param fetchCount 抓取数量
   */
  public FetchResponse(java.lang.CharSequence taskId, java.lang.CharSequence exrror, java.lang.Integer statusCode, java.lang.Integer fetchCount) {
    this.taskId = taskId;
    this.exrror = exrror;
    this.statusCode = statusCode;
    this.fetchCount = fetchCount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return taskId;
    case 1: return exrror;
    case 2: return statusCode;
    case 3: return fetchCount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: taskId = (java.lang.CharSequence)value$; break;
    case 1: exrror = (java.lang.CharSequence)value$; break;
    case 2: statusCode = (java.lang.Integer)value$; break;
    case 3: fetchCount = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'taskId' field.
   * @return Task ID
   */
  public java.lang.CharSequence getTaskId() {
    return taskId;
  }

  /**
   * Sets the value of the 'taskId' field.
   * Task ID
   * @param value the value to set.
   */
  public void setTaskId(java.lang.CharSequence value) {
    this.taskId = value;
  }

  /**
   * Gets the value of the 'exrror' field.
   * @return Server Message
   */
  public java.lang.CharSequence getExrror() {
    return exrror;
  }

  /**
   * Sets the value of the 'exrror' field.
   * Server Message
   * @param value the value to set.
   */
  public void setExrror(java.lang.CharSequence value) {
    this.exrror = value;
  }

  /**
   * Gets the value of the 'statusCode' field.
   * @return 是否抓取成功, 状态码
   */
  public java.lang.Integer getStatusCode() {
    return statusCode;
  }

  /**
   * Sets the value of the 'statusCode' field.
   * 是否抓取成功, 状态码
   * @param value the value to set.
   */
  public void setStatusCode(java.lang.Integer value) {
    this.statusCode = value;
  }

  /**
   * Gets the value of the 'fetchCount' field.
   * @return 抓取数量
   */
  public java.lang.Integer getFetchCount() {
    return fetchCount;
  }

  /**
   * Sets the value of the 'fetchCount' field.
   * 抓取数量
   * @param value the value to set.
   */
  public void setFetchCount(java.lang.Integer value) {
    this.fetchCount = value;
  }

  /**
   * Creates a new FetchResponse RecordBuilder.
   * @return A new FetchResponse RecordBuilder
   */
  public static com.sdyc.jise.server.protocol.FetchResponse.Builder newBuilder() {
    return new com.sdyc.jise.server.protocol.FetchResponse.Builder();
  }
  
  /**
   * Creates a new FetchResponse RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FetchResponse RecordBuilder
   */
  public static com.sdyc.jise.server.protocol.FetchResponse.Builder newBuilder(com.sdyc.jise.server.protocol.FetchResponse.Builder other) {
    return new com.sdyc.jise.server.protocol.FetchResponse.Builder(other);
  }
  
  /**
   * Creates a new FetchResponse RecordBuilder by copying an existing FetchResponse instance.
   * @param other The existing instance to copy.
   * @return A new FetchResponse RecordBuilder
   */
  public static com.sdyc.jise.server.protocol.FetchResponse.Builder newBuilder(com.sdyc.jise.server.protocol.FetchResponse other) {
    return new com.sdyc.jise.server.protocol.FetchResponse.Builder(other);
  }
  
  /**
   * RecordBuilder for FetchResponse instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FetchResponse>
    implements org.apache.avro.data.RecordBuilder<FetchResponse> {

    /** Task ID */
    private java.lang.CharSequence taskId;
    /** Server Message */
    private java.lang.CharSequence exrror;
    /** 是否抓取成功, 状态码 */
    private int statusCode;
    /** 抓取数量 */
    private int fetchCount;

    /** Creates a new Builder */
    private Builder() {
      super(com.sdyc.jise.server.protocol.FetchResponse.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sdyc.jise.server.protocol.FetchResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.taskId)) {
        this.taskId = data().deepCopy(fields()[0].schema(), other.taskId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.exrror)) {
        this.exrror = data().deepCopy(fields()[1].schema(), other.exrror);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.statusCode)) {
        this.statusCode = data().deepCopy(fields()[2].schema(), other.statusCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fetchCount)) {
        this.fetchCount = data().deepCopy(fields()[3].schema(), other.fetchCount);
        fieldSetFlags()[3] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing FetchResponse instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sdyc.jise.server.protocol.FetchResponse other) {
            super(com.sdyc.jise.server.protocol.FetchResponse.SCHEMA$);
      if (isValidValue(fields()[0], other.taskId)) {
        this.taskId = data().deepCopy(fields()[0].schema(), other.taskId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.exrror)) {
        this.exrror = data().deepCopy(fields()[1].schema(), other.exrror);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.statusCode)) {
        this.statusCode = data().deepCopy(fields()[2].schema(), other.statusCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fetchCount)) {
        this.fetchCount = data().deepCopy(fields()[3].schema(), other.fetchCount);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'taskId' field.
      * Task ID
      * @return The value.
      */
    public java.lang.CharSequence getTaskId() {
      return taskId;
    }

    /**
      * Sets the value of the 'taskId' field.
      * Task ID
      * @param value The value of 'taskId'.
      * @return This builder.
      */
    public com.sdyc.jise.server.protocol.FetchResponse.Builder setTaskId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.taskId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'taskId' field has been set.
      * Task ID
      * @return True if the 'taskId' field has been set, false otherwise.
      */
    public boolean hasTaskId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'taskId' field.
      * Task ID
      * @return This builder.
      */
    public com.sdyc.jise.server.protocol.FetchResponse.Builder clearTaskId() {
      taskId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'exrror' field.
      * Server Message
      * @return The value.
      */
    public java.lang.CharSequence getExrror() {
      return exrror;
    }

    /**
      * Sets the value of the 'exrror' field.
      * Server Message
      * @param value The value of 'exrror'.
      * @return This builder.
      */
    public com.sdyc.jise.server.protocol.FetchResponse.Builder setExrror(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.exrror = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'exrror' field has been set.
      * Server Message
      * @return True if the 'exrror' field has been set, false otherwise.
      */
    public boolean hasExrror() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'exrror' field.
      * Server Message
      * @return This builder.
      */
    public com.sdyc.jise.server.protocol.FetchResponse.Builder clearExrror() {
      exrror = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'statusCode' field.
      * 是否抓取成功, 状态码
      * @return The value.
      */
    public java.lang.Integer getStatusCode() {
      return statusCode;
    }

    /**
      * Sets the value of the 'statusCode' field.
      * 是否抓取成功, 状态码
      * @param value The value of 'statusCode'.
      * @return This builder.
      */
    public com.sdyc.jise.server.protocol.FetchResponse.Builder setStatusCode(int value) {
      validate(fields()[2], value);
      this.statusCode = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'statusCode' field has been set.
      * 是否抓取成功, 状态码
      * @return True if the 'statusCode' field has been set, false otherwise.
      */
    public boolean hasStatusCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'statusCode' field.
      * 是否抓取成功, 状态码
      * @return This builder.
      */
    public com.sdyc.jise.server.protocol.FetchResponse.Builder clearStatusCode() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'fetchCount' field.
      * 抓取数量
      * @return The value.
      */
    public java.lang.Integer getFetchCount() {
      return fetchCount;
    }

    /**
      * Sets the value of the 'fetchCount' field.
      * 抓取数量
      * @param value The value of 'fetchCount'.
      * @return This builder.
      */
    public com.sdyc.jise.server.protocol.FetchResponse.Builder setFetchCount(int value) {
      validate(fields()[3], value);
      this.fetchCount = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'fetchCount' field has been set.
      * 抓取数量
      * @return True if the 'fetchCount' field has been set, false otherwise.
      */
    public boolean hasFetchCount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'fetchCount' field.
      * 抓取数量
      * @return This builder.
      */
    public com.sdyc.jise.server.protocol.FetchResponse.Builder clearFetchCount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public FetchResponse build() {
      try {
        FetchResponse record = new FetchResponse();
        record.taskId = fieldSetFlags()[0] ? this.taskId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.exrror = fieldSetFlags()[1] ? this.exrror : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.statusCode = fieldSetFlags()[2] ? this.statusCode : (java.lang.Integer) defaultValue(fields()[2]);
        record.fetchCount = fieldSetFlags()[3] ? this.fetchCount : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
