/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.sdyc.jise.server.protocol;  
@SuppressWarnings("all")
/** 模板语言 */
@org.apache.avro.specific.AvroGenerated
public class JiseTemplate extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 605765309094912093L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"JiseTemplate\",\"namespace\":\"com.sdyc.jise.server.protocol\",\"doc\":\"模板语言\",\"fields\":[{\"name\":\"host\",\"type\":\"string\",\"doc\":\"URL 所属的 Host\"},{\"name\":\"matchHost\",\"type\":\"string\"},{\"name\":\"category\",\"type\":[\"string\",\"null\"]},{\"name\":\"meta\",\"type\":[{\"type\":\"map\",\"values\":\"string\"},\"null\"]},{\"name\":\"template\",\"type\":\"string\",\"doc\":\"模板正文\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** URL 所属的 Host */
  @Deprecated public java.lang.CharSequence host;
  @Deprecated public java.lang.CharSequence matchHost;
  @Deprecated public java.lang.CharSequence category;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> meta;
  /** 模板正文 */
  @Deprecated public java.lang.CharSequence template;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public JiseTemplate() {}

  /**
   * All-args constructor.
   * @param host URL 所属的 Host
   * @param template 模板正文
   */
  public JiseTemplate(java.lang.CharSequence host, java.lang.CharSequence matchHost, java.lang.CharSequence category, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> meta, java.lang.CharSequence template) {
    this.host = host;
    this.matchHost = matchHost;
    this.category = category;
    this.meta = meta;
    this.template = template;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return host;
    case 1: return matchHost;
    case 2: return category;
    case 3: return meta;
    case 4: return template;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: host = (java.lang.CharSequence)value$; break;
    case 1: matchHost = (java.lang.CharSequence)value$; break;
    case 2: category = (java.lang.CharSequence)value$; break;
    case 3: meta = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 4: template = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'host' field.
   * @return URL 所属的 Host
   */
  public java.lang.CharSequence getHost() {
    return host;
  }

  /**
   * Sets the value of the 'host' field.
   * URL 所属的 Host
   * @param value the value to set.
   */
  public void setHost(java.lang.CharSequence value) {
    this.host = value;
  }

  /**
   * Gets the value of the 'matchHost' field.
   */
  public java.lang.CharSequence getMatchHost() {
    return matchHost;
  }

  /**
   * Sets the value of the 'matchHost' field.
   * @param value the value to set.
   */
  public void setMatchHost(java.lang.CharSequence value) {
    this.matchHost = value;
  }

  /**
   * Gets the value of the 'category' field.
   */
  public java.lang.CharSequence getCategory() {
    return category;
  }

  /**
   * Sets the value of the 'category' field.
   * @param value the value to set.
   */
  public void setCategory(java.lang.CharSequence value) {
    this.category = value;
  }

  /**
   * Gets the value of the 'meta' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMeta() {
    return meta;
  }

  /**
   * Sets the value of the 'meta' field.
   * @param value the value to set.
   */
  public void setMeta(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.meta = value;
  }

  /**
   * Gets the value of the 'template' field.
   * @return 模板正文
   */
  public java.lang.CharSequence getTemplate() {
    return template;
  }

  /**
   * Sets the value of the 'template' field.
   * 模板正文
   * @param value the value to set.
   */
  public void setTemplate(java.lang.CharSequence value) {
    this.template = value;
  }

  /**
   * Creates a new JiseTemplate RecordBuilder.
   * @return A new JiseTemplate RecordBuilder
   */
  public static com.sdyc.jise.server.protocol.JiseTemplate.Builder newBuilder() {
    return new com.sdyc.jise.server.protocol.JiseTemplate.Builder();
  }
  
  /**
   * Creates a new JiseTemplate RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new JiseTemplate RecordBuilder
   */
  public static com.sdyc.jise.server.protocol.JiseTemplate.Builder newBuilder(com.sdyc.jise.server.protocol.JiseTemplate.Builder other) {
    return new com.sdyc.jise.server.protocol.JiseTemplate.Builder(other);
  }
  
  /**
   * Creates a new JiseTemplate RecordBuilder by copying an existing JiseTemplate instance.
   * @param other The existing instance to copy.
   * @return A new JiseTemplate RecordBuilder
   */
  public static com.sdyc.jise.server.protocol.JiseTemplate.Builder newBuilder(com.sdyc.jise.server.protocol.JiseTemplate other) {
    return new com.sdyc.jise.server.protocol.JiseTemplate.Builder(other);
  }
  
  /**
   * RecordBuilder for JiseTemplate instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<JiseTemplate>
    implements org.apache.avro.data.RecordBuilder<JiseTemplate> {

    /** URL 所属的 Host */
    private java.lang.CharSequence host;
    private java.lang.CharSequence matchHost;
    private java.lang.CharSequence category;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> meta;
    /** 模板正文 */
    private java.lang.CharSequence template;

    /** Creates a new Builder */
    private Builder() {
      super(com.sdyc.jise.server.protocol.JiseTemplate.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sdyc.jise.server.protocol.JiseTemplate.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.host)) {
        this.host = data().deepCopy(fields()[0].schema(), other.host);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.matchHost)) {
        this.matchHost = data().deepCopy(fields()[1].schema(), other.matchHost);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.category)) {
        this.category = data().deepCopy(fields()[2].schema(), other.category);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.meta)) {
        this.meta = data().deepCopy(fields()[3].schema(), other.meta);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.template)) {
        this.template = data().deepCopy(fields()[4].schema(), other.template);
        fieldSetFlags()[4] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing JiseTemplate instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sdyc.jise.server.protocol.JiseTemplate other) {
            super(com.sdyc.jise.server.protocol.JiseTemplate.SCHEMA$);
      if (isValidValue(fields()[0], other.host)) {
        this.host = data().deepCopy(fields()[0].schema(), other.host);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.matchHost)) {
        this.matchHost = data().deepCopy(fields()[1].schema(), other.matchHost);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.category)) {
        this.category = data().deepCopy(fields()[2].schema(), other.category);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.meta)) {
        this.meta = data().deepCopy(fields()[3].schema(), other.meta);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.template)) {
        this.template = data().deepCopy(fields()[4].schema(), other.template);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'host' field.
      * URL 所属的 Host
      * @return The value.
      */
    public java.lang.CharSequence getHost() {
      return host;
    }

    /**
      * Sets the value of the 'host' field.
      * URL 所属的 Host
      * @param value The value of 'host'.
      * @return This builder.
      */
    public com.sdyc.jise.server.protocol.JiseTemplate.Builder setHost(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.host = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'host' field has been set.
      * URL 所属的 Host
      * @return True if the 'host' field has been set, false otherwise.
      */
    public boolean hasHost() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'host' field.
      * URL 所属的 Host
      * @return This builder.
      */
    public com.sdyc.jise.server.protocol.JiseTemplate.Builder clearHost() {
      host = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'matchHost' field.
      * @return The value.
      */
    public java.lang.CharSequence getMatchHost() {
      return matchHost;
    }

    /**
      * Sets the value of the 'matchHost' field.
      * @param value The value of 'matchHost'.
      * @return This builder.
      */
    public com.sdyc.jise.server.protocol.JiseTemplate.Builder setMatchHost(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.matchHost = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'matchHost' field has been set.
      * @return True if the 'matchHost' field has been set, false otherwise.
      */
    public boolean hasMatchHost() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'matchHost' field.
      * @return This builder.
      */
    public com.sdyc.jise.server.protocol.JiseTemplate.Builder clearMatchHost() {
      matchHost = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * @return The value.
      */
    public java.lang.CharSequence getCategory() {
      return category;
    }

    /**
      * Sets the value of the 'category' field.
      * @param value The value of 'category'.
      * @return This builder.
      */
    public com.sdyc.jise.server.protocol.JiseTemplate.Builder setCategory(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.category = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'category' field has been set.
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'category' field.
      * @return This builder.
      */
    public com.sdyc.jise.server.protocol.JiseTemplate.Builder clearCategory() {
      category = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'meta' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMeta() {
      return meta;
    }

    /**
      * Sets the value of the 'meta' field.
      * @param value The value of 'meta'.
      * @return This builder.
      */
    public com.sdyc.jise.server.protocol.JiseTemplate.Builder setMeta(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.meta = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'meta' field has been set.
      * @return True if the 'meta' field has been set, false otherwise.
      */
    public boolean hasMeta() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'meta' field.
      * @return This builder.
      */
    public com.sdyc.jise.server.protocol.JiseTemplate.Builder clearMeta() {
      meta = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'template' field.
      * 模板正文
      * @return The value.
      */
    public java.lang.CharSequence getTemplate() {
      return template;
    }

    /**
      * Sets the value of the 'template' field.
      * 模板正文
      * @param value The value of 'template'.
      * @return This builder.
      */
    public com.sdyc.jise.server.protocol.JiseTemplate.Builder setTemplate(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.template = value;
      fieldSetFlags()[4] = true;
      return this; 
    }

    /**
      * Checks whether the 'template' field has been set.
      * 模板正文
      * @return True if the 'template' field has been set, false otherwise.
      */
    public boolean hasTemplate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'template' field.
      * 模板正文
      * @return This builder.
      */
    public com.sdyc.jise.server.protocol.JiseTemplate.Builder clearTemplate() {
      template = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public JiseTemplate build() {
      try {
        JiseTemplate record = new JiseTemplate();
        record.host = fieldSetFlags()[0] ? this.host : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.matchHost = fieldSetFlags()[1] ? this.matchHost : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.category = fieldSetFlags()[2] ? this.category : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.meta = fieldSetFlags()[3] ? this.meta : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[3]);
        record.template = fieldSetFlags()[4] ? this.template : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
